try{document.getElementById("comment-submit").addEventListener("click",(e=>{submitcomment(e,document.getElementById("comment-content").value,null)&&(document.getElementById("comment-content").value="")}))}catch(e){}async function submitcomment(e,t,n){e.preventDefault();const o=await fetch("/api/posts/"+postId+"/comments",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`${document.cookie.split("token=")[1].split(";")[0]}`},body:JSON.stringify({content:t,parentId:n})}),c=await o.json();if(console.log(c),c.succes){if(n){comments.find((e=>e.commentId===n)).children.push(c.comment.commentId)}comments.push(c.comment),makeComments()}return c.succes}const likeButton=document.getElementById("like-post"),unlikeButton=document.getElementById("unlike-post"),likesCount=document.getElementById("likes-count");async function likePost(){const e=await fetch("/api/posts/"+postId+"/like",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`${document.cookie.split("token=")[1].split(";")[0]}`}}),t=await e.json();console.log(t),t.succes&&(likeButton.style.display="none",unlikeButton.style.display="block",likesCount.innerHTML=parseInt(likesCount.innerHTML)+1)}async function unlikePost(){const e=await fetch("/api/posts/"+postId+"/unlike",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`${document.cookie.split("token=")[1].split(";")[0]}`}}),t=await e.json();console.log(t),t.succes&&(likeButton.style.display="block",unlikeButton.style.display="none",likesCount.innerHTML=parseInt(likesCount.innerHTML)-1)}async function deleteComment(e){const t=await fetch("/api/posts/"+postId+"/comments/"+e+"/delete",{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:`${document.cookie.split("token=")[1].split(";")[0]}`}}),n=await t.json();console.log(n)}async function likeComment(e){const t=await fetch("/api/posts/"+postId+"/comments/"+e+"/like",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`${document.cookie.split("token=")[1].split(";")[0]}`}}),n=await t.json();return console.log(n),n.succes}async function unlikeComment(e){const t=await fetch("/api/posts/"+postId+"/comments/"+e+"/unlike",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`${document.cookie.split("token=")[1].split(";")[0]}`}}),n=await t.json();return console.log(n),n.succes}function findChildren(e){return e.children.map((e=>findChildren(e).push(e.commentId)))}function makeCommentTree(e){if(!e||0===e.length)return[];const t=[];for(let n=0;n<e.length;n++){const o=e[n];o.children=o.children.map((t=>{if("string"!=typeof t)return t;const n=(o=t,e.find((e=>e.commentId===o)));var o;return n})),t.push(o)}const n=t.map((e=>e.children)).flat();for(let e=0;e<n.length;e++){const o=n[e],c=t.findIndex((e=>e.commentId===o.commentId));-1!==c&&t.splice(c,1)}return t}function renderComment(e){let t="";e.deleted&&(e.content="[This comment has been deleted]",t="comment-deleted");let n="<button class='like-button'>Like</button>";e.liked&&(n="<button class='like-button liked'>Unlike</button>");return`\n    <div class="comment">\n        <div class="comment-inner ${t}" data-comment-id="${e.commentId}">\n            <div class="comment-header">\n                <p class="comment-author"><img src="${e.author.avatar}" alt="${e.author.username}">${e.author.username}</p>\n                <p class="comment-date">${e.createdAt}</p>\n            </div>\n            <p class="comment-content">${e.content}</p>\n            <p class="comment-likes flex">${n}<span class="comment-likes-count">${e.likes}</span></p>\n            <button class="reply-button">Reply</button>\n        </div>\n        <div class="children">\n            ${renderComments(e.children)}\n        </div>\n    </div>\n    `}function renderComments(e){let t="";for(let n=0;n<e.length;n++){t+=renderComment(e[n])}return t}function updateCounter(e,t){const n=e.querySelector(".comment-likes-count");n.innerHTML=parseInt(n.innerHTML)+t}function addCommentEventListeners(){document.querySelectorAll(".like-button").forEach((e=>{e.addEventListener("click",(t=>{const n=e.parentElement.parentElement.getAttribute("data-comment-id");if(e.classList.contains("liked")){unlikeComment(n)&&(e.classList.remove("liked"),e.innerHTML="Like",updateCounter(e.parentElement,-1))}else{likeComment(n)&&(e.classList.add("liked"),e.innerHTML="Unlike",updateCounter(e.parentElement,1))}}))})),document.querySelectorAll(".reply-button").forEach((e=>{e.addEventListener("click",(t=>{createCommentInput(e.parentElement.getAttribute("data-comment-id"))}))}))}function makeComments(){const e=makeCommentTree(comments);document.getElementById("comments").innerHTML=renderComments(e),addCommentEventListeners()}function createCommentInput(e){const t=document.querySelector(`[data-comment-id="${e}"]`),n=document.createElement("div");n.classList.add("new-comment"),n.innerHTML='\n        <input type="text" class="new-comment-content" placeholder="Enter your comment..." />\n        <button class="new-comment-submit">Submit</button>\n        <button class="new-comment-cancel">Cancel</button>\n    ',t.appendChild(n);const o=n.querySelector(".new-comment-content");o.focus(),n.querySelector(".new-comment-submit").addEventListener("click",(t=>{submitcomment(t,o.value,e)&&(o.value="")})),n.querySelector(".new-comment-cancel").addEventListener("click",(e=>{t.removeChild(n)}))}if(likeButton.addEventListener("click",likePost),unlikeButton.addEventListener("click",unlikePost),makeComments(),""!==highlightedComment){const e=document.querySelector(`[data-comment-id="${highlightedComment}"]`);e.classList.add("highlighted"),setTimeout((()=>{e.scrollIntoView({behavior:"smooth",block:"center"})}),17),setTimeout((()=>{e.classList.remove("highlighted")}),1500)}